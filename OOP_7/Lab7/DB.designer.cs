#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lab7
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Kuv_UNIVER")]
	public partial class DB : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSTUDENT(STUDENT instance);
    partial void UpdateSTUDENT(STUDENT instance);
    partial void DeleteSTUDENT(STUDENT instance);
    partial void InsertMyImage(MyImage instance);
    partial void UpdateMyImage(MyImage instance);
    partial void DeleteMyImage(MyImage instance);
    partial void InsertFACULTY(FACULTY instance);
    partial void UpdateFACULTY(FACULTY instance);
    partial void DeleteFACULTY(FACULTY instance);
    #endregion
		
		public DB() : 
				base(global::Lab7.Properties.Settings.Default.Kuv_UNIVERConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DB(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<STUDENT> STUDENTs
		{
			get
			{
				return this.GetTable<STUDENT>();
			}
		}
		
		public System.Data.Linq.Table<MyImage> MyImages
		{
			get
			{
				return this.GetTable<MyImage>();
			}
		}
		
		public System.Data.Linq.Table<FACULTY> FACULTies
		{
			get
			{
				return this.GetTable<FACULTY>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.TestFunction", IsComposable=true)]
		public IQueryable<TestFunctionResult> TestFunction([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id)
		{
			return this.CreateMethodCallQuery<TestFunctionResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STUDENT")]
	public partial class STUDENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDSTUDENT;
		
		private System.Nullable<int> _IDGROUPS;
		
		private string _NAME;
		
		private System.Nullable<System.DateTime> _BDAY;
		
		private System.Data.Linq.Binary _STAMP;
		
		private System.Xml.Linq.XElement _INFO;
		
		private System.Data.Linq.Binary _FOTO;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDSTUDENTChanging(int value);
    partial void OnIDSTUDENTChanged();
    partial void OnIDGROUPSChanging(System.Nullable<int> value);
    partial void OnIDGROUPSChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnBDAYChanging(System.Nullable<System.DateTime> value);
    partial void OnBDAYChanged();
    partial void OnSTAMPChanging(System.Data.Linq.Binary value);
    partial void OnSTAMPChanged();
    partial void OnINFOChanging(System.Xml.Linq.XElement value);
    partial void OnINFOChanged();
    partial void OnFOTOChanging(System.Data.Linq.Binary value);
    partial void OnFOTOChanged();
    #endregion
		
		public STUDENT()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSTUDENT", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int IDSTUDENT
		{
			get
			{
				return this._IDSTUDENT;
			}
			set
			{
				if ((this._IDSTUDENT != value))
				{
					this.OnIDSTUDENTChanging(value);
					this.SendPropertyChanging();
					this._IDSTUDENT = value;
					this.SendPropertyChanged("IDSTUDENT");
					this.OnIDSTUDENTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="IDGROUPS", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> IDGROUPS
		{
			get
			{
				return this.IDGROUPS;
			}
			set
			{
				if ((this.IDGROUPS != value))
				{
					this.OnIDGROUPSChanging(value);
					this.SendPropertyChanging();
					this.IDGROUPS = value;
					this.SendPropertyChanged("IDGROUPS");
					this.OnIDGROUPSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BDAY", DbType="Date", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BDAY
		{
			get
			{
				return this._BDAY;
			}
			set
			{
				if ((this._BDAY != value))
				{
					this.OnBDAYChanging(value);
					this.SendPropertyChanging();
					this._BDAY = value;
					this.SendPropertyChanged("BDAY");
					this.OnBDAYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STAMP", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary STAMP
		{
			get
			{
				return this._STAMP;
			}
			set
			{
				if ((this._STAMP != value))
				{
					this.OnSTAMPChanging(value);
					this.SendPropertyChanging();
					this._STAMP = value;
					this.SendPropertyChanged("STAMP");
					this.OnSTAMPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_INFO", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement INFO
		{
			get
			{
				return this._INFO;
			}
			set
			{
				if ((this._INFO != value))
				{
					this.OnINFOChanging(value);
					this.SendPropertyChanging();
					this._INFO = value;
					this.SendPropertyChanged("INFO");
					this.OnINFOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FOTO", DbType="VarBinary(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary FOTO
		{
			get
			{
				return this._FOTO;
			}
			set
			{
				if ((this._FOTO != value))
				{
					this.OnFOTOChanging(value);
					this.SendPropertyChanging();
					this._FOTO = value;
					this.SendPropertyChanged("FOTO");
					this.OnFOTOChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MyImage")]
	public partial class MyImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Data.Linq.Binary _Img;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnImgChanging(System.Data.Linq.Binary value);
    partial void OnImgChanged();
    #endregion
		
		public MyImage()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Img", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Img
		{
			get
			{
				return this._Img;
			}
			set
			{
				if ((this._Img != value))
				{
					this.OnImgChanging(value);
					this.SendPropertyChanging();
					this._Img = value;
					this.SendPropertyChanged("Img");
					this.OnImgChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FACULTY")]
	public partial class FACULTY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FACULTY1;
		
		private string _FACULTY_NAME;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFACULTY1Changing(string value);
    partial void OnFACULTY1Changed();
    partial void OnFACULTY_NAMEChanging(string value);
    partial void OnFACULTY_NAMEChanged();
    #endregion
		
		public FACULTY()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="FACULTY", Storage="_FACULTY1", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FACULTY1
		{
			get
			{
				return this._FACULTY1;
			}
			set
			{
				if ((this._FACULTY1 != value))
				{
					this.OnFACULTY1Changing(value);
					this.SendPropertyChanging();
					this._FACULTY1 = value;
					this.SendPropertyChanged("FACULTY1");
					this.OnFACULTY1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FACULTY_NAME", DbType="VarChar(50)")]
		public string FACULTY_NAME
		{
			get
			{
				return this._FACULTY_NAME;
			}
			set
			{
				if ((this._FACULTY_NAME != value))
				{
					this.OnFACULTY_NAMEChanging(value);
					this.SendPropertyChanging();
					this._FACULTY_NAME = value;
					this.SendPropertyChanged("FACULTY_NAME");
					this.OnFACULTY_NAMEChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class TestFunctionResult
	{
		
		private int _IDSTUDENT;
		
		private System.Nullable<int> _IDGROUP;
		
		private string _NAME;
		
		private System.Nullable<System.DateTime> _BDAY;
		
		private System.Data.Linq.Binary _STAMP;
		
		private System.Xml.Linq.XElement _INFO;
		
		private System.Data.Linq.Binary _FOTO;
		
		public TestFunctionResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSTUDENT", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int IDSTUDENT
		{
			get
			{
				return this._IDSTUDENT;
			}
			set
			{
				if ((this._IDSTUDENT != value))
				{
					this._IDSTUDENT = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDGROUP", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> IDGROUPS
		{
			get
			{
				return this._IDGROUP;
			}
			set
			{
				if ((this._IDGROUP != value))
				{
					this._IDGROUP = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this._NAME = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BDAY", DbType="Date", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BDAY
		{
			get
			{
				return this._BDAY;
			}
			set
			{
				if ((this._BDAY != value))
				{
					this._BDAY = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STAMP", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary STAMP
		{
			get
			{
				return this._STAMP;
			}
			set
			{
				if ((this._STAMP != value))
				{
					this._STAMP = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_INFO", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement INFO
		{
			get
			{
				return this._INFO;
			}
			set
			{
				if ((this._INFO != value))
				{
					this._INFO = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FOTO", DbType="VarBinary(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary FOTO
		{
			get
			{
				return this._FOTO;
			}
			set
			{
				if ((this._FOTO != value))
				{
					this._FOTO = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
